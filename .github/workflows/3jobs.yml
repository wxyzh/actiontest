name: 3Jobs

on:
  workflow_dispatch:

jobs:
  Get_Commit_SHA:
    runs-on: windows-2022
    outputs:
      commit_sha: ${{ steps.get-commit-sha.outputs.commitsha }}
    steps:
      - name: Get librime commit sha
        id: get-commit-sha
        run: |
          $commit = git ls-remote https://github.com/rime/librime/ master
          $commitParts = $commit -split '\s+'
          $commitsha = $commitParts[0]
          echo "librime commit SHA: $commitsha"
          #$GITHUB_OUTPUT = "commitsha = $commitsha"
          echo "commitsha = $commitsha" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          cat $env:GITHUB_OUTPUT
          #echo "::set-output name=commitsha::$commitsha"

  job2:
    runs-on: windows-2022
    needs: Get_Commit_SHA
    env:
      commitsha_from_job1: ${{ needs.Get_Commit_SHA.outputs.commit_sha }}
    steps:
      - name: Use commit SHA in job2
        run: |
          #$commitsha_from_job1="${{ needs.Get_Commit_SHA.outputs.commit_sha }}"
          cat $env:GITHUB_OUTPUT
          echo $env:commitsha_from_job1
          echo "Using commit SHA from job1: $commitsha_from_job1"
          
  job3:
    runs-on: windows-2022
    if: ${{ always() }}
    needs: [Get_Commit_SHA, job2]
    steps:

      - name: Cache commit SHA
        id: cache-commit-sha
        uses: actions/cache@v2
        with:
          path: ${{ runner.workspace }}  # 缓存整个工作目录
          key: cache-${{ needs.Get_Commit_SHA.outputs.commit_sha }}  # 使用 commit SHA 作为缓存的 key
          
      - name: Create out.txt with commit SHA
        if: steps.cache-commit-sha.outputs.cache-hit != 'true' 
        run: |
          $commit_sha_from_job1="${{ needs.Get_Commit_SHA-sha.outputs.commit_sha }}"
          echo "Commit SHA from job1: $commit_sha_from_job1" > out.txt
      - name: OutPut commit SHA
        run: |
          write-host "test:"
          cat out.txt
          
  job4:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      output1: ${{ steps.step1.outputs.test }}
      output2: ${{ steps.step2.outputs.test }}
    steps:
      - id: step1
        run: echo "test=hello" >> "$GITHUB_OUTPUT"
      - id: step2
        run: echo "test=world" >> "$GITHUB_OUTPUT"
  job5:
    runs-on: ubuntu-latest
    needs: job4
    steps:
      - env:
          OUTPUT1: ${{needs.job4.outputs.output1}}
          OUTPUT2: ${{needs.job4.outputs.output2}}
        run: echo "$OUTPUT1 $OUTPUT2"
